import com.squareup.picasso.Picasso; 
d2919c2333e0f291ccf58c5e5ec88543
   buildTypes.each {
        it.buildConfigField 'String','THEMOVIEDB_APR',"\"d2919c2333e0f291ccf58c5e5ec88543\""
    }
    repositories {
        mavenCentral()
    }


    compile 'com.squareup.picasso:picasso:2.5.2'

    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"

@string/appTitle
@string/popularMoviesAppTitle
@string/stockHawkAppTitle
@string/buildItBiggerAppTitle
@string/makeYourAppMaterialAppTitle
@string/goUbiguitousAppTitle
@string/CapstoneAppTitle

My Nanodegree Apps!
Popular Movies
Stock Hawk
Build It Bigger
Make Your App Material
Go Ubiguitous
Capstone

http://api.themoviedb.org/3/movie/popular?api_key=d2919c2333e0f291ccf58c5e5ec88543
http://api.themoviedb.org/3/movie/top_rated?api_key=d2919c2333e0f291ccf58c5e5ec88543
http://api.themoviedb.org/3/movie/131631/videos?api_key=d2919c2333e0f291ccf58c5e5ec88543
http://api.themoviedb.org/3/movie/131631/reviews?api_key=d2919c2333e0f291ccf58c5e5ec88543

http://image.tmdb.org/t/p/w185/
- /9KQX22BeFzuNM66pBA6JbiaJ7Mi.jpg

LinearLayout

    String original_title;
    String poster;
    String synopsis;
    String user_rating;
    String release_date;

        android:scaleType="fitXY"

        android:horizontalSpacing="0.5sp"

    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"


    <header
        android:fragment="com.example.andriod.popularmoviev2.SettingsActivity$NotificationPreferenceFragment"
        android:icon="@drawable/ic_notifications_black_24dp"
        android:title="@string/pref_header_notifications" />

    <header
        android:fragment="com.example.andriod.popularmoviev2.SettingsActivity$DataSyncPreferenceFragment"
        android:icon="@drawable/ic_sync_black_24dp"
        android:title="@string/pref_header_data_sync" />

Activity Name - SettingActivity
Layout Name - activity_setting
Title - SettingActivity



LinearLayout

    <item
        android:id="@+id/action_sort_option"
        android:title="@string/sort_option_label"/>


        Intent intent = getIntent();


        ImageView posterView = (ImageView) converView.findViewById(R.id.moviePoster_image);
        Picasso.with(converView.getContext()).load(movie.poster).into(posterView);

        String[] movieProperties = intent.getStringArrayExtra("movie");

        for(int i=0;i<movieProperties.length;i++){
            Log.v(LOG_TAG,"Intent String: "+movieProperties[i]);
	}

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {

        Intent intent = getActivity().getIntent();

        // Inflate the layout for this fragment
        //rootView =  inflater.inflate(R.layout.fragment_detail, container, false)

        Log.v(LOG_TAG,"Intent String: "+intent.getStringExtra(Intent.EXTRA_TEXT));
        if(intent  != null && intent.hasExtra(Intent.EXTRA_TEXT)){
            mMovieitem = intent.getStringExtra(Intent.EXTRA_TEXT);
            ((TextView) inflater.inflate(R.layout.fragment_detail, container, false).findViewById(R.id.detail_synopsis))
                    .setText(mMovieitem);
        }
        Log.v(LOG_TAG,"Intent String: "+mMovieitem);
        return inflater.inflate(R.layout.fragment_detail, container, false);


@+id/detail_container
        ImageView posterView = (ImageView) converView.findViewById(R.id.moviePoster_image);

        AQuery aq = new AQuery(posterView);
        aq.id(R.id.moviePoster_image).image(movie.poster).visible();
"@+id/moviePoster_image"
Intent String:
added to code for checking if internet is available....
following location - http://stackoverflow.com/questions/1560788/how-to-check-internet-access-on-android-inetaddress-never-timeouts
public boolean isOnline() {

    Runtime runtime = Runtime.getRuntime();
    try {

        Process ipProcess = runtime.exec("/system/bin/ping -c 1 8.8.8.8");
        int     exitValue = ipProcess.waitFor();
        return (exitValue == 0);

    } catch (IOException e)          { e.printStackTrace(); } 
      catch (InterruptedException e) { e.printStackTrace(); }

    return false;
}

revert from before 11:27

    <ScrollView
        android:id="@+id/scrollView1"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:fillViewport="true">

    </ScrollView>

http://api.themoviedb.org/3/movie/popular?api_key=d2919c2333e0f291ccf58c5e5ec88543
http://api.themoviedb.org/3/genre/movie/list?api_key=d2919c2333e0f291ccf58c5e5ec88543

            for(int i=0; i < movieGenres.length;i++) {
                boolean gotGenreText = false;
                int h = 0;

                do {
                    h++;
                    JSONObject generInfo = genreArray.getJSONObject(h);

                    allGenres[h] = new Genre(generInfo.getString("id"),
                                    generInfo.getString("name"));

                    Log.v(LOG_TAG, "Genres id: " + allGenres[h].getId());

                    if(allGenres[h].getId().equals(movieGenres[i])){
                        gotGenreText = true;

                        if(result.isEmpty()){
                            result = allGenres[h].getName();
                        }else{
                            result = result + "," + allGenres[h].getName();
                        }
                    }
                    Log.v(LOG_TAG, "Genres name: " + result);
                } while(gotGenreText);
            }


-------------------------------------------------------------------------------


    public class GenreListTask extends AsyncTask<String, Void, String> {
        private final String LOG_TAG = GenreListTask.class.getSimpleName();

        @Override
        protected String doInBackground(String ... params){

            // These two need to be declared outside the try/catch
            // so that they canbe cloaed in the finally block
            // Taken from Sun-shine app (ForecastFragment.java file)
            HttpURLConnection urlConnection = null;
            BufferedReader reader = null;

            // Will contain the raw JSON response
            // Taken from Sun-shine app (ForecastFragment.java file)
            String movieJsonStr = null;
            String genreJsonStr = null;
            String format = "json";

            final String THEMOVIE_APT_BASE_URL = movieRoot+"genre/movie/list";
            final String APPID_PARAM = "api_key";

            // Removed the brackets starting and Ending from the JSON string
            String G;
            String result = "";
            boolean gotGenreText;

            // There are names of the JSON object that need to be extracted
            final String OWN_GENRES = "genres";

            Uri buildUri = Uri.parse(THEMOVIE_APT_BASE_URL).buildUpon()
                    .appendQueryParameter(APPID_PARAM, BuildConfig.THEMOVIEDB_API)
                    .build();

            try{
                // Off load the JSON getting to this method so I can
                // pass in more then one URL
                genreJsonStr = getJSONData(buildUri.toString());

                // Genre JSON object & Array
                JSONObject genreJson = new JSONObject(genreJsonStr);
                JSONArray genreArray = genreJson.getJSONArray(OWN_GENRES);

                G = params[0].replace("[", "");
                G = params[0].replace("]", "");

                // Separate the list of genres into an array list
                String[] movieGenres = G.split(",");

                // Go through the list of the movies genre id and get the name
                // of the genre
                for (int i = 0; i <= movieGenres.length-1;i++){
                    gotGenreText = false;
                    for(int j = 0; j <= genreArray.getJSONObject(i).length()-1;j++){
                        JSONObject generInfo = genreArray.getJSONObject(j);
                        if (movieGenres[i].equals(generInfo.getString("id"))) {
                            gotGenreText = true;

                            if(result.isEmpty()){
                                result = generInfo.getString("name");
                            }else {
                                result = result + "|" +generInfo.getString("name");
                            }
                        }
                    }
                }

            }catch (JSONException e) {
                Log.e(LOG_TAG, "Error", e);

            }finally{
                if(urlConnection != null){
                    urlConnection.disconnect();
                }
                if(reader != null){
                    try{
                        reader.close();
                    }catch (final IOException e){
                        Log.e(LOG_TAG,"Error closeing stream",e);
                    }
                }
            }
            return result;
        }

        // Take in a JSON Url and connects to API data
        // and returns all the JSONY goodiness
        private String getJSONData(String JSON) throws JSONException {
            HttpURLConnection urlConnection = null;
            BufferedReader reader = null;

            try {
                URL url = new URL(JSON);

                //Log.v(LOG_TAG,"Url String: "+buildUri.toString());

                // Create the request to The Movie DB API, and open the connection
                // Taken from Sun-shine app (ForecastFragment.java file)
                urlConnection = (HttpURLConnection) url.openConnection();
                urlConnection.setRequestMethod("GET");
                urlConnection.connect();

                // Read the input stream into a string
                // Taken from Sun-shine app (ForecastFragment.java file)
                InputStream inputStream = urlConnection.getInputStream();
                StringBuffer buffer = new StringBuffer();

                if (inputStream == null) {
                    // Nothing to do.
                    return null;
                }

                reader = new BufferedReader(new InputStreamReader(inputStream));

                String line;
                while ((line = reader.readLine()) != null) {
                    // Since it's JSON, adding a newline isn't necessary (it won't affect parsing)
                    // But it does make debugging a *lot* easier if you print out the completed
                    // buffer for debugging.
                    // Taken from Sun-shine app (ForecastFragment.java file)
                    buffer.append(line + "\n");
                }

                if (buffer.length() == 0) {
                    // Stream was empty. No point in parsing
                    // Taken from Sun-shine app (ForecastFragment.java file)
                    return null;
                }
                return buffer.toString();
            }catch (IOException e) {
                Log.e(LOG_TAG, "Error", e);

            }
            return null;
        }

        /*
        @Override
        protected void onPostExecute(String result) {
            if (result != null){
                movieGenreList = movieGenreList +"|"+result;
            }

        }*/
    }

        // When one of the view on the GridView is click the below will happen
        gridView.setOnItemClickListener(new AdapterView.OnItemClickListener(){
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int pos, long l){
                // Set the local movie object to the item that was
                // selected on the GridView screen
                Movie onMovieClick  = movieAdapter.getItem(pos);

                // Create a String array of movie parts to pass to the Intent for the
                // next activity to use
                String[] moviePart = {  onMovieClick.getOriginalTitle()};
                  /*                      imageRoot+onMovieClick.poster,
                                        onMovieClick.synopsis,
                                        onMovieClick.user_rating,
                                        onMovieClick.release_date,
                                        imageRoot+onMovieClick.background_poster,
                                        onMovieClick.movie_id, // Add for laster uses
                                        onMovieClick.genres};

                Intent	putExtra(String name, Parcelable value) .putExtra("movie",onMovieClick) (movie is parceable)
                            Add extended data to the intent.

                */
                // Create a specific Intent that will go to the DetailActivity
                // with the movie and string array of movie parts
                Intent detailIntent = new Intent(getActivity(),DetailActivity.class)
                        .putExtra("movie",moviePart);

                // Start the new activity (and pass the information along)
                startActivity(detailIntent);
            }
        });

CREATE TABLE weather( 
_id INTEGER PRIMARY KEY, 
date TEXT NOT NULL, 
min REAL NOT NULL, 
max REAL NOT NULL, 
humidity REAL NOT NULL, 
pressure REAL NOT NULL);

-----Popular Movie P2 ---

Public class MovieContract{

    public static final String CONTENT_AUTHORITY = 'com.example.andriod.popularmoviev2.Model';

    public static final Uri BASE_CONTENT_URI = Uri.parse("contact://"+CONTENT_AUTHORITY);

    public static final String PATH_MOVIE = "movie";
    public static final String PATH_REVIEW = "review";
    public static final String PATH_GENRE = "genre";
    public static final String PATH_TRAILER = "trailer";

    public static final class MovieEntry implements BaseColumns{
	// String holds the table name
	public static final String TABLE_NAME = "movie";

	// Columns in the movie DB
        // Columns in the movie DB
        public static final String COLUMN_ID = "_ID"; //Unique key
        public static final String COLUMN_POSTER_PATH = "poster_path";
        public static final String COLUMN_ADULT = "adult";
        public static final String COLUMN_OVERVIEW = "overview";
        public static final String COLUMN_RELEASE_DATE = "release_date";
        public static final String COLUMN_GENRE_IDS = "genre_ids";
        public static final String COLUMN_ORIGINAL_TITLE = "original_title";
        public static final String COLUMN_ORIGINAL_LANGUAGE = "original_language";
        public static final String COLUMN_TITLE = "title";
        public static final String COLUMN_BACKDROP_PATH = "backdrop_path";
        public static final String COLUMN_POPULARITY = "popularity";
        public static final String COLUMN_VOTE_COUNT = "vote_count";
        public static final String COLUMN_VIDEO = "video";
    }

    public static final class ReviewEntry implements BaseColumns{	
	// String holding the table name
	public static final String TABLE_NAME = "review";
	
	// Colums in the Review DB
	public static final String COLUMN_MOVIE_ID = "_id";
	public static final String COLUMN_ID = "id";
	public static final String COLUMN_AUTHOR = "author";
	public static final String COLUMN_CONTENT = "content";
	public static final String COLUMN_URL = "URL";
    }

    public statis final class GenreEntry implements BaseColumns{
	// String holding the table name
	public static final String TABLE_NAME ="genre';
	
	// Columns in the Genre DB
	public static final String COLUMN_ID = "id;
	public static final String COLUMN_NAME = "name";

    }
    
    public static final class TrailerEntry implements BaseColumns{
	// String holding the table name
	public static final String TABLE_NAME = "trailer";

	// Columns in the Trailer DB
	public static final String COLUMN_ID = "id";
	public static final String COLUMN_ISO_6391 = "iso_6391";
	public static final String COLUMN_ISO_31661 = "iso_3166_1";
	public static final String COLUMN_KEY = "key";
	public static final String COLUMN_NAME = "name";
	public static final String COLUMN_SITE = "site";
	public static final String COLUMN_SIZE = "size";
	public static final String COLUMN_TYPE = "type";
	
id,author,content,URL
"id","iso_6391","iso_3166_1","key","name","site","size","type"
    }
}

public class MovieViewerDbHelper extends SQLiteOpenHelper {
    // If you change the database schema, you must increment the database version.
    private static final int DATABASE_VERSION = 2;

    static final String DATABASE_NAME = "moviepopular.db";

    public MovieDbHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }
	
    
    @Overrider
    public void onCreate(SQLiteOpenHelper sQLiteOpenHelper){
	// Create the create string for the individual table
	final String SQL_CREATE_MOVIE_TABLE = "CREATE TABLE " + MovieEntry.TABLE_NAME + " (" +
		MovieEntry.	
    }
}

1) Create a Loader ID
 	private static final int MY_LOADER_ID = [my id] 
	(int constant, single activity can use many loader we difereaniate by the number)
2) Fill-in Loader Callbacks
	Loader<Cursor> onCreateLoader(int i, Bundle bundle)
		return new cursorLoader([Context},
			[uri],[Projection],
			[Selection],[SelectionArgs],
			[Sort Order]);
		(create and return our cursorLoader, done on a background thread
		using the query just like a curse background thread because derivated from asyntask)
	void onLoadFinished(Loader<Cursor> cursorLoader,Cursor cursor)
		(will be called when cursorLoader is done and the data is ready, to use the data in our
		curse we use cursorAdapter.swapCursor(cursor), if we still have any more update (to uri) 
		this is the place to do it.)
	void onLoadReset(Loader<Cursor> cursorLoader
		(this method is usually only called as our cursor is being destory, which is where
		we remove all reference to the curse data, curseAdapter.swapCursor(null);
	(general 2 interface type)

3) Init Loader with LoaderManager
	getLoadManager().initLoader([loader_ID],[Bundle],[loaderCallback]);
	*When loading in a fragment, you should do this in the onActivityCreated method
	(we initize our curse here, we do all the lifecycle stuff for the loader)


String[] FORECAST_COLUMNS = {
    WeatherEntry.COLUMN_PRESSURE,
    WeatherEntry.COLUMN_MAX_TEMP,
    WeatherEntry.COLUMN_MIN_TEMP,
    WeatherEntry.COLUMN_HUMIDITY
};


int COL_PRESSURE_INDEX = 0;
int COL_MIN_TEMP_INDEX = 1;
int COL_MAX_TEMP_INDEX = 2;
int COL_HUMIDITY_INDEX = 3;


// then use indexies to get that column of information from the cursor
cursor.getDouble(COL_MIN_TEMP_INDEX);


private static final String[] FORECAST_COLUMNS = {
   WeatherEntry.TABLE_NAME + "." + WeatherEntry._ID,
   WeatherEntry.COLUMN_DATE,
   WeatherEntry.COLUMN_SHORT_DESC,
   WeatherEntry.COLUMN_MAX_TEMP,
   WeatherEntry.COLUMN_MIN_TEMP
};

"movie/popular"
"movie/top_rated"

table movie has no column named movie_id (code 1)

    tools:layout="@layout/fragment_main" 

------ Review Comments -------
ProTip: Watch so Perf Matters!! - intesting video on memory usage
REST API - Retroft -- library (http://square.github.io/retrofit/) (network...) 
- (https://zeroturnaround.com/rebellabs/getting-started-with-retrofit-2/ helpfully)
- https://discussions.udacity.com/t/refactoring-for-retrofit/172563/41
- http://blog.mediarain.com/2013/05/building-a-better-rest-client/
- https://discussions.udacity.com/t/after-sync-not-all-movies-inserted-to-database/161971
SyncAdapter -- https://developer.android.com/training/sync-adapters/creating-sync-adapter.html
IntentService -- 


(specification --- https://review.udacity.com/#!/rubrics/67/view)
ViewHolder --- is an option for my  views
ButterKnife library --- (http://jakewharton.github.io/butterknife/)

// Class that creates the Review (ReviewEntry) table

        // Location for the specific table (used to acces table data)
        public static final Uri CONTENT_URI =
                BASE_CONTENT_URI.buildUpon().appendPath(PATH_MOVIE).build();

        // The type of data I will be send if retrieved
        public static final String CONTENT_TYPE =
                ContentResolver.CURSOR_DIR_BASE_TYPE + "/" + CONTENT_AUTHORITY + "/" + PATH_MOVIE;

        // URI for the specific Movie row in the movie table
        public static Uri buildMovieUri(long id){
            return ContentUris.withAppendedId(CONTENT_URI,id);
        }
detail_imageView
titleText - detail_textView1 - detail_titleTextView
synopsisText - detail_textView2 - detail_synopsisTextView
userRatingText - detail_textView3 - detail_UserRateingTextView
releaseDateText - detail_textView4 - detail_releaseDateTextView
genreText - detail_textView5 - detail_genreTextView
reviewText - detail_textView6 - detail_reviewTextView
trailerText - detail_textView7 - detail_trailerTextView